
–ß–∞—Ç —Å Gemini
–ù–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Python Flask, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º–µ–π–ª—ã –æ—Ç –≤–µ–± —Ñ–æ—Ä–º—ã, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–π–ª—ã —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ—Ä–≤–∏—Å–∞ Brevo
–û—Ç–ª–∏—á–Ω–æ! –í–æ—Ç –ø—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —á–∞—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Python Flask, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç email –∏–∑ –≤–µ–±-—Ñ–æ—Ä–º—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–µ—Ä–≤–∏—Å Brevo (Sendinblue) –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞.

–í–∞–∂–Ω–æ: –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ Flask –∏ requests, –∞ —Ç–∞–∫–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–µ—Ä–≤–∏—Å–µ Brevo –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á API.

Python
from flask import Flask, request, render_template
import requests
import os

app = Flask(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á API –æ—Ç Brevo
BREVO_API_KEY = os.environ.get("BREVO_API_KEY")
if not BREVO_API_KEY:
    print("–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω –∫–ª—é—á API Brevo. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BREVO_API_KEY.")
    exit()

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞ –≤ Brevo
TEMPLATE_ID = 1  # –ü—Ä–∏–º–µ—Ä ID, –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        email = request.form['email']
        send_email_brevo(email, TEMPLATE_ID)
        return "–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
    return render_template('index.html')

def send_email_brevo(recipient_email, template_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ Brevo –∏—Å–ø–æ–ª—å–∑—É—è —à–∞–±–ª–æ–Ω."""
    url = "https://api.brevo.com/v3/smtp/email"

    headers = {
        "accept": "application/json",
        "content-type": "application/json",
        "api-key": BREVO_API_KEY
    }

    payload = {
        "templateId": template_id,
        "to": [{"email": recipient_email}]
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∞–±–ª–æ–Ω–∞ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –∑–¥–µ—Å—å, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        # "params": {"name": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"}
    }

    response = requests.post(url, headers=headers, json=payload)

    if response.status_code == 202:
        print(f"–ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –∞–¥—Ä–µ—Å: {recipient_email}")
    else:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: {response.status_code}, {response.text}")

if __name__ == '__main__':
    app.run(debug=True)
–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ—Ç –∫–æ–¥:

–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: Flask –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, request –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, render_template –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ HTML, requests –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Brevo –∏ os –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
–°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–ü–æ–ª—É—á–∞–µ—Ç –∫–ª—é—á API Brevo: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á API –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç ID —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞: –ó–∞–º–µ–Ω–∏—Ç–µ 1 –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π ID –≤–∞—à–µ–≥–æ —à–∞–±–ª–æ–Ω–∞ –≤ Brevo.
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –º–∞—Ä—à—Ä—É—Ç /:
–ü—Ä–∏ GET-–∑–∞–ø—Ä–æ—Å–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–æ—Ä–º—É –¥–ª—è –≤–≤–æ–¥–∞ email (—Ñ–∞–π–ª index.html).
–ü—Ä–∏ POST-–∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—É—á–∞–µ—Ç email –∏–∑ —Ñ–æ—Ä–º—ã, –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é send_email_brevo –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ.
–§—É–Ω–∫—Ü–∏—è send_email_brevo:
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç email –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ ID —à–∞–±–ª–æ–Ω–∞.
–§–æ—Ä–º–∏—Ä—É–µ—Ç URL –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API Brevo.
–°–æ–∑–¥–∞–µ—Ç JSON-—Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞, —É–∫–∞–∑—ã–≤–∞—è ID —à–∞–±–ª–æ–Ω–∞ –∏ email –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ API Brevo.
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç API Brevo –∏ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–µ.
–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏.
–§–∞–π–ª templates/index.html (—Å–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É templates):

HTML
<!DOCTYPE html>
<html>
<head>
    <title>–û—Ç–ø—Ä–∞–≤–∫–∞ Email</title>
</head>
<body>
    <h1>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email</h1>
    <form method="post">
        <label for="email">Email:</label>
        <input type="email" id="email" name="email" required><br><br>
        <button type="submit">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</button>
    </form>
</body>
</html>
–ö–∞–∫ –∑–∞–ø—É—Å—Ç–∏—Ç—å:

–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: pip install Flask requests.
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–¥ Python –≤ —Ñ–∞–π–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, app.py.
–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É templates –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç—É–¥–∞ —Ñ–∞–π–ª index.html.
–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BREVO_API_KEY (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º: export BREVO_API_KEY=–í–∞—à_API_–∫–ª—é—á).
–ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py.
–û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∞–¥—Ä–µ—Å http://127.0.0.1:5000/ –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É.
–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à —à–∞–±–ª–æ–Ω –ø–∏—Å—å–º–∞ –≤ Brevo –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø–æ–ª–µ params –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞.

–£–¥–∞—á–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!

–ü–µ—Ä–µ–ø–∏—à–∏ –∫–æ–¥ —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞ –∏–º–µ–π–ª—ã –Ω–∞ —É—Ä–ª https://get-emails-mauve-zeta-96.vercel.app/

<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Formulario de correo electr√≥nico</title>
<link rel="stylesheet" href="styles.css">
</head>
<body>
<div class="container">
<div class="language-buttons">
<button id="enButton">üá¨üáß</button>
<button id="esButton">üá™üá∏</button>
</div>
<h1 id="title">Ingrese direcciones de correo electr√≥nico</h1>
<p id="description">Este formulario se utiliza para enviar correos electr√≥nicos a los clientes del hotel para recopilar comentarios sobre su experiencia.</p>
<textarea id="emailInput" placeholder="Pegue las direcciones de correo electr√≥nico aqu√≠..."></textarea>
<p id="counter">Correos electr√≥nicos ingresados: 0</p>
<button id="sendButton">Enviar</button>
<p id="statusMessage"></p>
<h2>Estado de env√≠o</h2>
<ul id="emailStatus"></ul>
</div>
<script src="script.js"></script>
</body>
</html>

/* General styles inspired by Blue Line */
body {
font-family: Arial, sans-serif;
background-color: #f4f4f4;
text-align: center;
padding: 20px;
}
.container {
background: white;
padding: 20px;
border-radius: 10px;
box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);
max-width: 500px;
margin: auto;
}
h1, h2 {
color: #003366;
}
textarea {
width: 100%;
height: 100px;
padding: 10px;
border: 1px solid #ccc;
border-radius: 5px;
box-sizing: border-box; /* –î–æ–±–∞–≤–ª—è–µ–º box-sizing */
}
button {
background-color: #003366;
color: white;
border: none;
padding: 10px 20px;
border-radius: 5px;
cursor: pointer;
margin-top: 10px;
}
button:hover {
background-color: #0055a4;
}
ul {
list-style-type: none;
padding: 0;
}
li {
text-align: left;
padding: 5px;
font-size: 14px;
}
.language-buttons {
display: flex;
justify-content: center;
margin-bottom: 10px;
}
.language-buttons button {
background: none;
border: none;
padding: 5px 10px;
font-size: 20px;
cursor: pointer;
}


document.addEventListener("DOMContentLoaded", () => {
const emailInput = document.getElementById("emailInput");
const counter = document.getElementById("counter");
const sendButton = document.getElementById("sendButton");
const statusMessage = document.getElementById("statusMessage");
const emailStatus = document.getElementById("emailStatus");
const title = document.getElementById("title");
const description = document.getElementById("description");
const enButton = document.getElementById("enButton");
const esButton = document.getElementById("esButton");
let currentLanguage = "es"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

const translations = {
en: {
title: "Enter email addresses",
description: "This form is used to send emails to hotel customers to collect feedback about their experience.",
placeholder: "Paste email addresses here...",
counter: "Emails entered: ",
send: "Send",
statusTitle: "Sending status",
sending: "Sending...",
sent: "Emails sent successfully.",
error: "Please enter at least one email address."
},
es: {
title: "Ingrese direcciones de correo electr√≥nico",
description: "Este formulario se utiliza para enviar correos electr√≥nicos a los clientes del hotel para recopilar comentarios sobre su experiencia.",
placeholder: "Pegue las direcciones de correo electr√≥nico aqu√≠...",
counter: "Correos electr√≥nicos ingresados: ",
send: "Enviar",
statusTitle: "Estado de env√≠o",
sending: "Enviando...",
sent: "Correos electr√≥nicos enviados con √©xito.",
error: "Por favor, ingrese al menos una direcci√≥n de correo electr√≥nico."
}
};

function updateContent() {
title.textContent = translations[currentLanguage].title;
description.textContent = translations[currentLanguage].description;
emailInput.placeholder = translations[currentLanguage].placeholder;
counter.textContent = translations[currentLanguage].counter + parseEmails(emailInput.value).length;
sendButton.textContent = translations[currentLanguage].send;
document.querySelector("h2").textContent = translations[currentLanguage].statusTitle;
}

enButton.addEventListener("click", () => {
currentLanguage = "en";
updateContent();
});

esButton.addEventListener("click", () => {
currentLanguage = "es";
updateContent();
});

function parseEmails(input) {
return input.split(/[\s,;\n]+/).filter(email => email.includes("@"));
}

emailInput.addEventListener("input", () => {
const emails = parseEmails(emailInput.value);
counter.textContent = translations[currentLanguage].counter + emails.length;
});

sendButton.addEventListener("click", () => {
const emails = parseEmails(emailInput.value);
if (emails.length === 0) {
statusMessage.textContent = translations[currentLanguage].error;
statusMessage.style.color = "red";
return;
}

statusMessage.textContent = translations[currentLanguage].sending;
statusMessage.style.color = "black";

setTimeout(() => {
emailStatus.innerHTML = "";
emails.forEach(email => {
let li = document.createElement("li");
li.textContent = `${email} - Enviado ‚úîÔ∏è`;
emailStatus.appendChild(li);
});
statusMessage.textContent = translations[currentLanguage].sent;
statusMessage.style.color = "green";
}, 1500);
});

updateContent();
});
–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π –∏–∑–º–µ–Ω–∏–º –∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∏–º–µ–π–ª—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π URL. –ü–æ—Å–∫–æ–ª—å–∫—É —è –Ω–µ –º–æ–≥—É –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ HTTP-–∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–Ω–µ—à–Ω–∏–µ —Å–∞–π—Ç—ã (—ç—Ç–æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ), —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ, –∫–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å JavaScript-–∫–æ–¥, —á—Ç–æ–±—ã –æ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–ª –¥–∞–Ω–Ω—ã–µ –Ω–∞ —ç—Ç–æ—Ç URL.

–í–∞–∂–Ω–æ: –≠—Ç–æ—Ç –∫–æ–¥ –±—É–¥–µ—Ç –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π URL. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–∞ —Ç–æ–π —Å—Ç–æ—Ä–æ–Ω–µ –µ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.

–í–æ—Ç –∫–∞–∫ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å JavaScript-–∫–æ–¥ (—Ñ–∞–π–ª script.js):

JavaScript
document.addEventListener("DOMContentLoaded", () => {
    const emailInput = document.getElementById("emailInput");
    const counter = document.getElementById("counter");
    const sendButton = document.getElementById("sendButton");
    const statusMessage = document.getElementById("statusMessage");
    const emailStatus = document.getElementById("emailStatus");
    const title = document.getElementById("title");
    const description = document.getElementById("description");
    const enButton = document.getElementById("enButton");
    const esButton = document.getElementById("esButton");
    let currentLanguage = "es"; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å–ø–∞–Ω—Å–∫–∏–π —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const targetUrl = "https://get-emails-mauve-zeta-96.vercel.app/"; // –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π URL

    const translations = {
        en: {
            title: "Enter email addresses",
            description: "This form is used to send emails to hotel customers to collect feedback about their experience.",
            placeholder: "Paste email addresses here...",
            counter: "Emails entered: ",
            send: "Send",
            statusTitle: "Sending status",
            sending: "Sending...",
            sent: "Emails sent successfully.",
            error: "Please enter at least one email address."
        },
        es: {
            title: "Ingrese direcciones de correo electr√≥nico",
            description: "Este formulario se utiliza para enviar correos electr√≥nicos a los clientes del hotel para recopilar comentarios sobre su experiencia.",
            placeholder: "Pegue las direcciones de correo electr√≥nico aqu√≠...",
            counter: "Correos electr√≥nicos ingresados: ",
            send: "Enviar",
            statusTitle: "Estado de env√≠o",
            sending: "Enviando...",
            sent: "Correos electr√≥nicos enviados con √©xito.",
            error: "Por favor, ingrese al menos una direcci√≥n de correo electr√≥nico."
        }
    };

    function updateContent() {
        title.textContent = translations[currentLanguage].title;
        description.textContent = translations[currentLanguage].description;
        emailInput.placeholder = translations[currentLanguage].placeholder;
        counter.textContent = translations[currentLanguage].counter + parseEmails(emailInput.value).length;
        sendButton.textContent = translations[currentLanguage].send;
        document.querySelector("h2").textContent = translations[currentLanguage].statusTitle;
    }

    enButton.addEventListener("click", () => {
        currentLanguage = "en";
        updateContent();
    });

    esButton.addEventListener("click", () => {
        currentLanguage = "es";
        updateContent();
    });

    function parseEmails(input) {
        return input.split(/[\s,;\n]+/).filter(email => email.includes("@"));
    }

    emailInput.addEventListener("input", () => {
        const emails = parseEmails(emailInput.value);
        counter.textContent = translations[currentLanguage].counter + emails.length;
    });

    sendButton.addEventListener("click", () => {
        const emails = parseEmails(emailInput.value);
        if (emails.length === 0) {
            statusMessage.textContent = translations[currentLanguage].error;
            statusMessage.style.color = "red";
            return;
        }

        statusMessage.textContent = translations[currentLanguage].sending;
        statusMessage.style.color = "black";
        emailStatus.innerHTML = ""; // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        fetch(targetUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ emails: emails })
        })
        .then(response => {
            if (response.ok) {
                return response.json(); // –ò–ª–∏ response.text(), –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
            } else {
                throw new Error('Network response was not ok');
            }
        })
        .then(data => {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            console.log('Success:', data);
            statusMessage.textContent = translations[currentLanguage].sent;
            statusMessage.style.color = "green";
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            emails.forEach(email => {
                let li = document.createElement("li");
                li.textContent = `${email} - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚úîÔ∏è`;
                emailStatus.appendChild(li);
            });
        })
        .catch((error) => {
            console.error('Error:', error);
            statusMessage.textContent = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ.";
            statusMessage.style.color = "red";
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ email
            emails.forEach(email => {
                let li = document.createElement("li");
                li.textContent = `${email} - –û—à–∏–±–∫–∞ ‚ùå`;
                emailStatus.appendChild(li);
            });
        });
    });

    updateContent();
});
